

#Область НастройкиПолучениеДанныхдляОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	МассивНазначений = Новый Массив;
	//МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг"); //Указываем документ к которому делаем внешнюю печ. форму
	//МассивНазначений.Добавить("Документ.ПеремещениеТоваров");
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", 			"ДополнительнаяОбработка");
	//может быть – ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование",	Метаданные().Представление());					//ШАБЛОН
	ПараметрыРегистрации.Вставить("Версия",			"1.0");													//ШАБЛОН
	ПараметрыРегистрации.Вставить("БезопасныйРежим",Ложь);													//ШАБЛОН
	ПараметрыРегистрации.Вставить("Информация",		"Коннектор_Б24");	//ШАБЛОН
	ПараметрыРегистрации.Вставить("ВерсияБСП",		"1.2.1.4");												// не ниже какой версии БСП подерживается обработка
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
		
	ДобавитьКоманду(
					ТаблицаКоманд,
					"Коннектор_Б24",	//ШАБЛОН. Имя команды
					"Коннектор_Б24",	//ШАБЛОН. Идентификатор команды
					"ОткрытиеФормы" ,  //"ОткрытиеФормы",				//Вариант запуска команды
					Истина,							//ШАБЛОН. Показывать оповещение
					Неопределено								//Модификатор. Используется для дополнительных обработок печатных форм на основе табличных макетов, для таких команд должен содержать строку ПечатьMXL
	);

	
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;

КонецФункции // СведенияОВнешнейОбработке

Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление",			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор",			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование",			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение",	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор",				Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;

КонецФункции // ПолучитьТаблицуКоманд

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда	= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление			= Представление;
	НоваяКоманда.Идентификатор			= Идентификатор;
	НоваяКоманда.Использование			= Использование;
	НоваяКоманда.ПоказыватьОповещение	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор			= Модификатор;

КонецПроцедуры // ДобавитьКоманду

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	
	
КонецПроцедуры	

#КонецОбласти



#Область НастройкиОбработки 

Процедура ЗаполнитьНастройкиОбработки() Экспорт

	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ  
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка КАК Ссылка,
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ХранилищеНастроек КАК ХранилищеНастроек
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработкиКоманды
	               |ГДЕ
	               |	ДополнительныеОтчетыИОбработкиКоманды.ИмяОбъекта = &Идентификатор";
		 
	Запрос.УстановитьПараметр("Идентификатор", ЭтотОбъект.Метаданные().Имя);
		 
	ХранилищеНастроек = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
		 
	Если Выборка.Следующий() Тогда
		 
		ХранилищеНастроек = Выборка.ХранилищеНастроек;
		
	КонецЕсли; 
	 
	Если ХранилищеНастроек <> Неопределено Тогда
	 
		СтруктураНастроек = ХранилищеНастроек.Получить();
		  
		Если ТипЗнч(СтруктураНастроек) = тип("Структура") Тогда
		  
			ЗаполнитьЗначенияСвойств(Этотобъект, СтруктураНастроек); 
			   
			МетаданныеОбъект = ЭтотОбъект.Метаданные();
			   
			Для каждого Реквизит Из МетаданныеОбъект.Реквизиты Цикл
				СтруктураНастроек.Свойство(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
			КонецЦикла;
				
			Для Каждого ТабличнаяЧасть Из МетаданныеОбъект.ТабличныеЧасти Цикл
				Если СтруктураНастроек.Свойство(ТабличнаяЧасть.Имя) И ТипЗнч(СтруктураНастроек[ТабличнаяЧасть.Имя]) = Тип("ТаблицаЗначений") Тогда
					ЭтотОбъект[ТабличнаяЧасть.Имя].Загрузить(СтруктураНастроек[ТабличнаяЧасть.Имя]); 
				КонецЕсли;
			КонецЦикла;
			   
		  КонецЕсли;
		  
	  КонецЕсли;
	  
КонецПроцедуры
  
Процедура СохранитьНастройки() Экспорт 
	
	СтруктураНастроек = Новый Структура;
	
	МетаданныеОбъект = ЭтотОбъект.Метаданные();
	Для Каждого Реквизит Из МетаданныеОбъект.Реквизиты Цикл 
		
		СтруктураНастроек.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
		
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъект.ТабличныеЧасти Цикл
			СтруктураНастроек.Вставить(ТабличнаяЧасть.Имя, ЭтотОбъект[ТабличнаяЧасть.Имя].Выгрузить()); 
		КонецЦикла;
		
		
	КонецЦикла;
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ  
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка КАК Ссылка,
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.ХранилищеНастроек КАК ХранилищеНастроек
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработкиКоманды
	               |ГДЕ
	               |	ДополнительныеОтчетыИОбработкиКоманды.ИмяОбъекта = &Идентификатор";
		 
	Запрос.УстановитьПараметр("Идентификатор", ЭтотОбъект.Метаданные().Имя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ОбработкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОбработкаОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
		ОбработкаОбъект.Записать();
	Иначе
		ВызватьИсключение "Невозможно сохранить параметры обработки!";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область Обмент_Б24 

// структураПараметров -  Структура  
// Ключи :
// TITLE			- строка
// DESCRIPTION		- строка
// DEADLINE         - дата - срок выполнения
// PRIORITY         - строка - приоритет
// ACCOMPLICES      - массив - соисполнители
// AUDITORS		    - массив - наблюдатели
// GROUP_ID			- строка - идентификатор группы
// RESPONSIBLE_ID   - строка - идентификатор ответственного
// CREATED_BY 				- идентификатор автора (обязательный) - строка
// FILES             - массив структур файлов    - имяФайла - двоичныеДанные - идентификаторФайла (если есть)
// и все остальное , что имеет признак  "запись" из доступных полей
//  https://dev.1c-bitrix.ru/rest_help/tasks/fields.php
// файлы предварительно загружаем в хранилище.
// UF_TASK_WEBDAV_FILES - массив идентификаторов файлов
Функция создатьЗадачуБ24( структураПараметров )  экспорт

	ЗаполнитьНастройкиОбработки() ;	 
	структураОтвета = получитьСтруктуруОтвета() ;
	
	методСервиса = "tasks.task.add";
	
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?"; 
	
	UF_TASK_WEBDAV_FILES = новый массив;
	
	Если структураПараметров.свойство("FILES") Тогда
	
		Для каждого стрФайл Из структураПараметров.FILES Цикл
		
			идФайла = получитьИдентификаторФайла(стрФайл);

			Если значениеЗаполнено(идФайла) Тогда
			
				UF_TASK_WEBDAV_FILES.Добавить(идФайла);
			
			КонецЕсли;
			
					
		КонецЦикла;
	
	КонецЕсли;
	
	структураПараметров.вставить("UF_TASK_WEBDAV_FILES", UF_TASK_WEBDAV_FILES);
	
	телоЗапроса =  сформироватьЗапросЗадачи(структураПараметров);
												
	возврат  отправитьЗапросОбработатьОтвет(АдресРесурса,телоЗапроса,,структураПараметров );

	
КонецФункции 

// структураПараметров -  Структура  
// Ключи :
// message			- строка    - сообщение
// to				- строка    - идентификатор получателя
Функция сотправитьСообщениеБ24( структураПараметров )  экспорт

	ЗаполнитьНастройкиОбработки() ;
	
	методСервиса = "im.notify";
	
	
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗапроса =   "&message=" + структураПараметров.message 
					+  "&to=" + ?(структураПараметров.свойство("to"), структураПараметров.to , "")
					+   "&type=SYSTEM";

					
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗапроса,,структураПараметров);

	
КонецФункции

// структураПараметров -  Структура  
// Ключи :
// POST_MESSAGE			- строка    - сообщение
// POST_TITLE			- строка    - заголовок
// Files                - массив  Структур данных файла - ИмяФайла  - ДвДанные  
Функция ЖиваяЛентаБ24( структураПараметров )  экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "log.blogpost.add";
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	
	телоЗапроса =   "POST_MESSAGE=" + структураПараметров.POST_MESSAGE
					+  "&POST_TITLE=" + ?(структураПараметров.свойство("POST_TITLE"), структураПараметров.POST_TITLE , "") ;
					
										
	Если структураПараметров.свойство("Files") Тогда
		йй = 0;			
		Для каждого стрФайл Из структураПараметров.Files Цикл
		
			телоЗапроса =   телоЗапроса  +  "&FILES["+йй+"][0]=" + стрФайл.имяФайла + "&FILES["+йй+"][1]=" + преобразоватьТелоФайла(стрФайл.ДвДанные);

		
		КонецЦикла;			
					
	КонецЕсли;
						

					
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗапроса,,структураПараметров);

	
КонецФункции


// структураПараметров -  Структура  
// Ключи :
// TITLE			- строка
// DESCRIPTION		- строка
// DEADLINE         - дата - срок выполнения
// PRIORITY         - строка - приоритет
// ACCOMPLICES      - массив - соисполнители
// AUDITORS		    - массив - наблюдатели
// GROUP_ID			- строка - идентификатор группы
// RESPONSIBLE_ID   - строка - идентификатор ответственного
// CREATED_BY 				- идентификатор автора (обязательный) - строка
// FILES            - массив структур файлов    - имяФайла - двоичныеДанные - идентификаторФайла (если есть)
// check_list       - массив пунктов чек-листа (строки)
// и все остальное , что имеет признак  "запись" из доступных полей
//  https://dev.1c-bitrix.ru/rest_help/tasks/fields.php
// файлы предварительно загружаем в хранилище.
// UF_TASK_WEBDAV_FILES - массив идентификаторов файлов
Функция создатьЗадачуЧекЛистБ24( структураПараметров )  экспорт

	ЗаполнитьНастройкиОбработки() ;	 
		
	методСервиса = "batch";
	
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?halt=0&cmd[task_create]=tasks.task.add";
	
	// файлы
	UF_TASK_WEBDAV_FILES = новый массив;
	
	Если структураПараметров.свойство("FILES") Тогда
	
		Для каждого стрФайл Из структураПараметров.FILES Цикл
		
			идФайла = получитьИдентификаторФайла(стрФайл);

			Если значениеЗаполнено(идФайла) Тогда
			
				UF_TASK_WEBDAV_FILES.Добавить(идФайла);
			
			КонецЕсли;
			
					
		КонецЦикла;
	
	КонецЕсли;
	
	структураПараметров.вставить("UF_TASK_WEBDAV_FILES", UF_TASK_WEBDAV_FILES);

	
	телоЗадачи = сформироватьЗапросЗадачи(структураПараметров);

	кодироватьСпецСимволы(телоЗадачи);
	
	АдресРесурса = АдресРесурса + телоЗадачи;
	
	телоЧекЛиста = "";
	Если структураПараметров.свойство("check_list") Тогда
		
		йй = 1;
		Для каждого эл Из структураПараметров.check_list Цикл
	       телоЧекЛиста =  телоЧекЛиста  + "&cmd[chek_list_create" + йй + "]=task.checklistitem.add?TASKID=";
		   
		   строкаЧЛ = "$result[task_create][task][id]&FIELDS[TITLE]=" + эл  ;
		   кодироватьСпецСимволы(строкаЧЛ);
		   телоЧекЛиста =  телоЧекЛиста  + строкаЧЛ;
		   йй = йй + 1;
		КонецЦикла;

	
	КонецЕсли;
	
	
	АдресРесурса = АдресРесурса + телоЧекЛиста;

	возврат  отправитьЗапросОбработатьОтвет(АдресРесурса, "", ложь,структураПараметров);
		
КонецФункции	

// структураПараметров -  Структура  
// id - идентификатор сделки
Функция получитьДанныеСделки( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "crm.deal.get";
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =  "id=" + структураПараметров.id ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции

// структураПараметров -  Структура  
// TITLE - название
Функция СоздатьКомпанию( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "crm.company.add";
				
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =    "fields[TITLE]=" + структураПараметров.TITLE + "&fields[COMPANY_TYPE]=CUSTOMER" ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции 

Функция ПолучитьСписокПолейКомпании( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "crm.company.fields";
	
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?" ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса,,,структураПараметров);

КонецФункции 

Функция ПолучитьСписокПолейЗадачи( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "tasks.task.getFields";
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?" ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса,,,структураПараметров);

КонецФункции 

// структураПараметров -  Структура  
// ID 			- строка - идентификатор задачи
// POST_MESSAGE		- строка - текст комментария
Функция добавитьКомментарийЗадачи( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "task.commentitem.add";
			
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =    "taskId=" + структураПараметров.ID
					+ "&fields[POST_MESSAGE]= "   + структураПараметров.POST_MESSAGE ;

	сообщить(телоЗадачи);	
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции // ()

Функция ПолучитьСписокХранилищ( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "disk.storage.getlist";
			
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса,,,структураПараметров);

КонецФункции 

// структураПараметров -  Структура
// идентификаторХранилища - идентификатор хранилища
// структураПараметров -   структура
// имяФайла - имя файла
// ДвДанные - двоичные данные файла

Функция загрузитьФайлХранилище( структураПараметров, идентификаторХранилища = 1 ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "disk.storage.uploadfile";
	
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json";
	
	телоЗадачи =    "id=" + идентификаторХранилища + "&data[NAME]= " + структураПараметров.имяФайла + "&fileContent[0]=" + структураПараметров.имяФайла
					+  "&fileContent[1]="+ преобразоватьТелоФайла(структураПараметров.ДвДанные)
					+  "&generateUniqueName = 1";

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции 

Функция ПолучитьДоступныеХранилища( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "disk.storage.getforapp";
	
			
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json" ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса,,,структураПараметров);

КонецФункции 

// структураПараметров -  Структура  
// id - идентификатор файла
Функция получитьДанныеФайла( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "disk.file.get";
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =  "id=" + структураПараметров.id ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции

// структураПараметров -  Структура  
// id - идентификатор задачи
Функция получитьДанныеЗадачи( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "tasks.task.get";
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =  "id=" + структураПараметров.id ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции

// структураПараметров -  Структура  
// id - идентификатор хранилища
Функция получитьСоставХранилища ( структураПараметров ) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "disk.storage.getchildren";
	
		
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	телоЗадачи =  "id=" + структураПараметров.id ;

		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров);

КонецФункции

// структураПараметров -  Структура  
// id - идентификатор задачи
// FILES            - массив структур файлов    - имяФайла - двоичныеДанные - идентификаторФайла (если есть)

Функция обновитьЗадачу(структураПараметров) экспорт

	ЗаполнитьНастройкиОбработки() ;	
	
	методСервиса = "tasks.task.update";
			
	АдресРесурса = "/" + АдресРесурсаЗадачи + "/"+ методСервиса + ".json?";
	
	// файлы
	UF_TASK_WEBDAV_FILES = новый массив;
	
	Если структураПараметров.свойство("FILES") Тогда
	
		Для каждого стрФайл Из структураПараметров.FILES Цикл
		
			идФайла = получитьИдентификаторФайла(стрФайл);

			Если значениеЗаполнено(идФайла) Тогда
			
				UF_TASK_WEBDAV_FILES.Добавить(идФайла);
			
			КонецЕсли;
			
					
		КонецЦикла;
	
	КонецЕсли;
	
	структураПараметров.вставить("UF_TASK_WEBDAV_FILES", UF_TASK_WEBDAV_FILES);

	// получаем данные задачи
	данныеБ24 = получитьДанныеЗадачи( структураПараметров );
	телоЗадачи =  "taskId=" + структураПараметров.id;
	
	йй = 0;
	Если значениеЗаполнено(данныеБ24) тогда
		
		Если данныеБ24.естьОшибки  тогда
			возврат  данныеБ24;
			
		Иначе
			//Если данныеБ24.структураДанных.result.task.свойство("UF_TASK_WEBDAV_FILES") Тогда
			
			Для каждого элС Из данныеБ24 Цикл
			
				сообщить(элС.ключ + "      " + элС.значение);
			КонецЦикла;

			
			Для каждого эл Из данныеБ24.структураДанных.result.task.UF_TASK_WEBDAV_FILES Цикл
			
				телоЗадачи =  телоЗадачи  +  "&fields[UF_TASK_WEBDAV_FILES][" + йй + "]="+ эл ; 
			    йй = йй +1;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли; 
	
	 Для каждого новФайл Из структураПараметров.UF_TASK_WEBDAV_FILES Цикл
	 
	 	 телоЗадачи =  телоЗадачи  +  "&fields[UF_TASK_WEBDAV_FILES][" + йй + "]=n"+ новФайл ; 
	 
	 КонецЦикла;
	
					
		
	возврат отправитьЗапросОбработатьОтвет(АдресРесурса, телоЗадачи,,структураПараметров, "'multipart/form-data'");


КонецФункции // ()


#КонецОбласти

#Область ВспомогательныеПроцедурыФункции 

Функция отправитьЗапросОбработатьОтвет(АдресРесурса,телоЗапроса = "", post = истина,структураПараметров, КоьентТип = "application/x-www-form-urlencoded; charset=utf-8")

	структураОтвета = получитьСтруктуруОтвета() ;

	соединение = получитьСоединение();
											
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки.Вставить("Content-Type"		,КоьентТип);
	HTTPЗапрос.Заголовки.Вставить("Content-Length"		, Формат(СтрДлина(телоЗапроса), "ЧГ=0"));		
		
	Если  post Тогда
		
	  HTTPЗапрос.УстановитьТелоИзСтроки(телоЗапроса , КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать) ;

	  Ответ 			= Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Иначе
	  Ответ 			= Соединение.получить(HTTPЗапрос);
	
	КонецЕсли; 
	
	ОтветСтрокой 	= Ответ.ПолучитьТелоКакСтроку();

	
	СтруктураДанных = неопределено;
	ИД = "";
	//ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);

	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON;
    	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
		СтруктураДанных = ПрочитатьJSON(ЧтениеJSON);
	
	    
	Исключение
		
		ЧтениеJSON = Новый ЧтениеJSON;
    	ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);

		UF_TASK_WEBDAV_FILES = новый массив;
		
	    Пока ЧтениеJSON.Прочитать() Цикл
		
			Если   ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
				и
				ЧтениеJSON.ТекущееЗначение = "id"  Тогда
			
				ЧтениеJSON.Прочитать();
				ИД =  ЧтениеJSON.ТекущееЗначение;
				//прервать;
				
			иначеЕсли   ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
				и
				ЧтениеJSON.ТекущееЗначение = "ufTaskWebdavFiles"  Тогда
			
				ЧтениеJSON.Прочитать();
				идентификаторыФайлов =  ЧтениеJSON.ТекущееЗначение;	
			    идентификаторыФайлов = стрЗаменить(идентификаторыФайлов,"[", "");
				идентификаторыФайлов = стрЗаменить(идентификаторыФайлов,"]", "");

				массивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок( идентификаторыФайлов,",");
				Для каждого идФайла Из массивПодстрок Цикл
				
					  UF_TASK_WEBDAV_FILES.Добавить(идФайла);
				
				КонецЦикла;				
			КонецЕсли;
			
		
		КонецЦикла; 

	КонецПопытки;

	
	
	
	ГиперссылкаЗадачи = "";
	
	Если СтруктураДанных <> неопределено  тогда
		
		Если  СтруктураДанных.свойство("error_description")  Тогда
	
			структураОтвета.вставить("естьОшибки", истина );
			структураОтвета.вставить("ОписаниеОшибки", РаскодироватьJSON(СтруктураДанных.error_description) );
			
		конецЕсли;
	конецЕсли;
		
		
	Если  ЗначениеЗаполнено(ИД)  тогда


		ГиперссылкаЗадачи = "https://" + АдресСервера + "/company/personal/user/"+?(структураПараметров.свойство("CREATED_BY"),структураПараметров.CREATED_BY,1)+"/tasks/task/view/" + ИД + "/";
		структураОтвета.вставить("Результат",  ГиперссылкаЗадачи );
		структураОтвета.вставить("Идентификатор",  ИД );
	КонецЕсли;
	
	Если ЗначениеЗаполнено(UF_TASK_WEBDAV_FILES) Тогда
	
		  структураОтвета.вставить("UF_TASK_WEBDAV_FILES", UF_TASK_WEBDAV_FILES);
	
	КонецЕсли;
	
	структураОтвета.вставить("СтруктураДанных", СтруктураДанных );
	структураОтвета.вставить("ОтветСтрокой", ОтветСтрокой );

	сообщить(ответСтрокой);
	
	возврат   структураОтвета;


КонецФункции // ()

Функция получитьСоединение()

	ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Неопределено,
			Неопределено); 
			
	возврат Новый HTTPСоединение(АдресСервера,Порт,,,,30,ssl,Ложь);



КонецФункции // ()

Функция получитьСтруктуруОтвета()

	возврат новый Структура("естьОшибки, ОписаниеОшибки, Результат, СтруктураДанных, ОтветСтрокой", ложь,"", "", неопределено, "");

КонецФункции // ()

Функция сформироватьЗапросЗадачи(структураПараметров)

	 ТелоЗадачи =  "&fields[TITLE]=" + ?(структураПараметров.свойство("TITLE"), структураПараметров.TITLE , "")
													+ "&fields[DESCRIPTION]="+?(структураПараметров.свойство("DESCRIPTION"), структураПараметров.DESCRIPTION , "")
													+ "&fields[DEADLINE]="  + XMLСтрока( ?(структураПараметров.свойство("DEADLINE"),структураПараметров.DEADLINE , текущаяДата() + 24*60*60))
													+ "&fields[PRIORITY]="  + ?(структураПараметров.свойство("PRIORITY"), структураПараметров.PRIORITY , "1") ;
													
								йй = 0;
								Для каждого исп Из структураПараметров.ACCOMPLICES Цикл
								
									ТелоЗадачи = ТелоЗадачи  + "&fields[ACCOMPLICES]["+ йй  +"]=" + исп;
									йй = йй + 1;
								
								КонецЦикла;					
													
								йй = 0;
								Для каждого набл Из структураПараметров.AUDITORS Цикл
								
									ТелоЗадачи = ТелоЗадачи  + "&fields[AUDITORS]["+ йй  +"]=" + набл;
									йй = йй + 1;

								
								КонецЦикла;						

								
													
		ТелоЗадачи = ТелоЗадачи  + "&fields[GROUP_ID]=" + ?(структураПараметров.свойство("идентификаторГруппы"),структураПараметров.идентификаторГруппы ,"")

													+ "&fields[RESPONSIBLE_ID]=" + структураПараметров.RESPONSIBLE_ID
													+ "&fields[CREATED_BY]=" +  структураПараметров.CREATED_BY;
													
												
		Если структураПараметров.свойство("UF_TASK_WEBDAV_FILES") Тогда
			
			кк = 0;
			Для каждого идентификаторФайла Из структураПараметров.UF_TASK_WEBDAV_FILES Цикл
				
							
				ТелоЗадачи = ТелоЗадачи  +  "&fields[UF_TASK_WEBDAV_FILES][" + кк+ "]=n"+ идентификаторФайла ; 

			
				кк = кк + 1;

			КонецЦикла;
			
														
		
			
		КонецЕсли;

		возврат ТелоЗадачи;											
													
КонецФункции // ()

Процедура кодироватьСпецСимволы(телоЗадачи)

	 телоЗадачи = стрЗаменить(телоЗадачи, "?", "%3F" );
	 телоЗадачи = стрЗаменить(телоЗадачи, "[", "%5B" );
	 телоЗадачи = стрЗаменить(телоЗадачи, "]", "%5D" );
	 телоЗадачи = стрЗаменить(телоЗадачи, "=", "%3D" );
	 телоЗадачи = стрЗаменить(телоЗадачи, "&", "%26" );
	 телоЗадачи = стрЗаменить(телоЗадачи, "$", "%2524" );


КонецПроцедуры

Функция получитьИдентификаторФайла(стрФайл)

	 Если стрФайл.свойство("идентификаторФайла") и значениеЗаполнено(стрФайл.идентификаторФайла) Тогда
			
	 	возврат  стрФайл.идентификаторФайла;
				
	 КонецЕсли;

	 структураПараметров = новый Структура("имяФайла , двДанные ",стрФайл.имяФайла  , стрФайл.двДанные);
	 
	 результат = загрузитьФайлХранилище( структураПараметров );

	 Если значениеЗаполнено(результат)
		 и результат.свойство("СтруктураДанных")
		 и значениеЗаполнено(результат.СтруктураДанных.result.ID )
		 Тогда
	 
	 	  возврат результат.СтруктураДанных.result.ID;
	  иначе
		  возврат неопределено;
	 КонецЕсли;
	 
КонецФункции // ()

// эта чаcть позаимствована из блока Битрикс24 
Функция РаскодироватьJSON(URL)
	
	Результат = URL; 
	
	СписокСимволов = Новый СписокЗначений;
	СписокСимволов.Добавить("\u0430", "а");
	СписокСимволов.Добавить("\u0431", "б");
	СписокСимволов.Добавить("\u0432", "в");
	СписокСимволов.Добавить("\u0433", "г");
	СписокСимволов.Добавить("\u0434", "д");
	СписокСимволов.Добавить("\u0435", "е");
	СписокСимволов.Добавить("\u0451", "ё");
	СписокСимволов.Добавить("\u0436", "ж");
	СписокСимволов.Добавить("\u0437", "з");
	СписокСимволов.Добавить("\u0438", "и");
	СписокСимволов.Добавить("\u0439", "й");
	СписокСимволов.Добавить("\u043a", "к");
	СписокСимволов.Добавить("\u043b", "л");
	СписокСимволов.Добавить("\u043c", "м");
	СписокСимволов.Добавить("\u043d", "н");
	СписокСимволов.Добавить("\u043e", "о");
	СписокСимволов.Добавить("\u043f", "п");
	СписокСимволов.Добавить("\u0440", "р");
	СписокСимволов.Добавить("\u0441", "с");
	СписокСимволов.Добавить("\u0442", "т");
	СписокСимволов.Добавить("\u0443", "у");
	СписокСимволов.Добавить("\u0444", "ф");
	СписокСимволов.Добавить("\u0445", "х");
	СписокСимволов.Добавить("\u0446", "ц");
	СписокСимволов.Добавить("\u0447", "ч");
	СписокСимволов.Добавить("\u0448", "ш");
	СписокСимволов.Добавить("\u0448", "щ");
	СписокСимволов.Добавить("\u044a", "ъ");
	СписокСимволов.Добавить("\u044b", "ы");
	СписокСимволов.Добавить("\u044c", "ь");
	СписокСимволов.Добавить("\u044d", "э");
	СписокСимволов.Добавить("\u044e", "ю");
	СписокСимволов.Добавить("\u044f", "я");
	
	СписокСимволов.Добавить("\u0410", "А");
	СписокСимволов.Добавить("\u0411", "Б");
	СписокСимволов.Добавить("\u0412", "В");
	СписокСимволов.Добавить("\u0413", "Г");
	СписокСимволов.Добавить("\u0414", "Д");
	СписокСимволов.Добавить("\u0415", "Е");
	СписокСимволов.Добавить("\u0401", "Ё");
	СписокСимволов.Добавить("\u0416", "Ж");
	СписокСимволов.Добавить("\u0417", "З");
	СписокСимволов.Добавить("\u0418", "И");
	СписокСимволов.Добавить("\u0419", "Й");
	СписокСимволов.Добавить("\u041a", "К");
	СписокСимволов.Добавить("\u041b", "Л");
	СписокСимволов.Добавить("\u041c", "М");
	СписокСимволов.Добавить("\u041d", "Н");
	СписокСимволов.Добавить("\u041e", "О");
	СписокСимволов.Добавить("\u041f", "П");
	СписокСимволов.Добавить("\u0420", "Р");
	СписокСимволов.Добавить("\u0421", "С");
	СписокСимволов.Добавить("\u0422", "Т");
	СписокСимволов.Добавить("\u0423", "У");
	СписокСимволов.Добавить("\u0424", "Ф");
	СписокСимволов.Добавить("\u0425", "Х");
	СписокСимволов.Добавить("\u0426", "Ц");
	СписокСимволов.Добавить("\u0427", "Ч");
	СписокСимволов.Добавить("\u0428", "Ш");
	СписокСимволов.Добавить("\u0428", "Щ");
	СписокСимволов.Добавить("\u042a", "Ъ");
	СписокСимволов.Добавить("\u042b", "Ы");
	СписокСимволов.Добавить("\u042c", "Ь");
	СписокСимволов.Добавить("\u042d", "Э");
	СписокСимволов.Добавить("\u042e", "Ю");
	СписокСимволов.Добавить("\u042f", "Я");
	
	
	СписокСимволов.Добавить("\u0022", "'");
	
	СписокСимволов.Добавить("\u003E", ">");
	СписокСимволов.Добавить("\u003е", ">");
	
	СписокСимволов.Добавить("\u003C", "<");
	СписокСимволов.Добавить("\u003c", "<");
	
	Для Каждого текЭлемент Из СписокСимволов Цикл
		
		Результат = СтрЗаменить(Результат,текЭлемент.Значение, текЭлемент.Представление);	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция преобразоватьТелоФайла(ДвДанные)

СтрокаФорматBase64 = Base64Строка(ДвДанные);

возврат КодироватьСтроку(СтрокаФорматBase64 , СпособКодированияСтроки.КодировкаURL, "UTF8");


КонецФункции // ()
 

#КонецОбласти


